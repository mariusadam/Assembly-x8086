;6. Sa se implementeze un program de autentificare. 
;Programul are definit in segmentul de date un sir de caractere numit 'parola'. 
;Programul va cere utilizatorului sa introduca parola de la tastatura 
;si va verifica daca aceasta este identica cu sirul 'parola' din segmentul 
;de date si va afisa un mesaj corespunzator. 
;Programul tot cere utilizatorului parola, pana cand acesta o ghiceste.
assume cs:code, ds:data
data segment
	pw db 'never'
	len_pw equ $ - pw
	msg db 'Enter password: $'
	errMsg db 'Acces Denied!$'
	maxPassUserLen db 50
	len_pass_user db ?
	pass_user db 50 dup(?)
	succes db 'Acces Granted!$'
data ends
code segment
newLine proc
	push ax
	push dx
	mov dl, 10
	mov ah, 02h
	int 21h
	pop dx
	pop ax
	ret
newLine endp
readUserPass proc
;citeste de la tastatura un sir de caractere fara 
;ecou pana la intalnirea caracterului new line
;lungimea sirului citit se va afla in len_pass_user
;iar sirul in pass_user
	push ax
	push cx
	push si
	mov si, 0
	mov cl, maxPassUserLen
	xor ch, ch
	citeste:
		mov ah, 07h
		int 21h
		cmp al, 13
		je break
		mov pass_user[si], al
		inc si
		mov dl, '*'
		mov ah, 02h
		int 21h
	loop citeste
	break:
	mov cx, si
	mov len_pass_user, cl
	pop si
	pop cx
	pop ax
	ret
readUserPass endp
start:
	mov ax, data
	mov ds, ax
	mov es, ax
	repeta:
		lea dx, msg
		mov ah, 09h
		int 21h
		
		call readUserPass
		
		cmp len_pass_user, len_pw
		jne mismatch
		cld
		lea si, pw
		lea di, pass_user
		mov cl, len_pw
		xor ch, ch
		repe cmpsb
		jne mismatch
		match:
			call newLine
			lea dx, succes
			mov ah, 09h
			int 21h
			jmp final
		mismatch:
			call newLine
			lea dx, errMsg
			mov ah, 09h
			int 21h
			call newLine
	jmp repeta
	final:
	mov ax, 4c00h
	int 21h
code ends
end start
