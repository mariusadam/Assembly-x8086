;Sa se citeasca numele unui fisier si sa sa se inlocuiasca consoanele din fisier 
;cu numarul lor de ordine din alfabet.
assume cs:code, ds:data
data segment
	msgFile db 'Introduceti numele fisierului: $'
	msgOpenError db 'Eroare la deschiderea fisierului!$'
	msgReadError db 'Eroare la citirea din fisier!$'
	msgWriteError db 'Eroare la scrierea in fisier!$'
	msgCloseError db 'Eroare la inchiderea fisierului!$'
	msgPointerError db 'Eroare la mutarea pointerului de fisier!$'
	
	maxFileName db 20
	lenFileName db ?
	fileName db 20 dup(?)
	
	handle dw ?
	consoane db 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM'
	lenConsoane equ $-consoane
	char db ?
	zece db 10
	buff db 500 dup(?)
	maxBuff_size equ $ - buff
	buff_size dw ?
data ends
code segment
newLine proc
	push ax
	push dx
	mov dl, 10
	mov ah, 02h
	int 21h
	pop dx
	pop ax
	ret
newLine endp
start:
	mov ax, data
	mov ds, ax
	;mesaj pentru numele fisierului
	lea dx, msgFile
	mov ah, 09h
	int 21h
	;citesc numele fisierului
	lea dx, maxFileName
	mov ah, 0Ah
	int 21h
	;transform numele fis in asciiz
	mov bl, lenFileName
	xor bh, bh
	mov byte ptr fileName[bx], 0
	;deschid fisierul pentru citire/scriere

	lea dx, fileName
	mov al, 2
	mov ah, 3Dh
	int 21h 
	jnc peste_open_error
		call newLine
		lea dx, msgOpenError
		mov ah, 09h
		int 21h
		jmp final
	peste_open_error:
	mov handle, ax
	;incerc sa citesc 65535 caractere din fisier
	lea dx, buff
	mov bx, handle
	mov cx, maxBuff_size
	mov ah, 3Fh
	int 21h
	jnc peste_read_error
		lea dx, msgReadError
		mov ah, 09h
		int 21h
		jmp final
	peste_read_error:
	;mut pointerul de fisier la inceput
	mov buff_size, ax
	mov al, 0
	mov cx, 0
	mov dx, 0
	mov bx, handle
	mov ah, 42h
	int 21h
	jnc peste_pointer_error
		lea dx, msgPointerError
		mov ah, 09h
		int 21h
		jmp final
	peste_pointer_error:
	;parcurg buffer caracter cu caracter si daca gasesc o consoana scriu in fisier
	;numarul sau din alfabet, in caz contrar scriu caracterul respectiv
	mov si, 0
	mov cx, buff_size
	cld
	repeta:
		mov al, byte ptr buff[si]
		;verifica daca caracterul din al se gaseste in sirul de consoane
		push cx
		mov cx, lenConsoane
		mov di, 0
		cauta:
			cmp al, consoane[di]
			je is_consoana
			inc di
		loop cauta
		;daca ajung aici caracterul din al nu este consoana si il scriu in fisier
		mov char, al
		lea dx, char
		mov bx, handle
		mov cx, 1
		mov ah, 40h
		int 21h
		jc write_error
		jmp next
		is_consoana:	;daca ajung aici inseamna ca in al se afla o consoana si afisez numarul sau din alfabet
			cmp al, 5Ah ;5Ah = ord('Z')
			ja lower
			sub al, 41h
			jmp write_al
			lower:
				sub al, 61h
			write_al:
			add al, 1
			mov cx, 0
			imparte:
				xor ah, ah
				div zece
				mov dl, ah
				xor dh, dh
				push dx
				inc cx
				cmp al, 0
			jne imparte
			write_file:
				pop ax
				push cx
				add al, '0'
				mov char, al
				lea dx, char
				mov bx, handle
				mov cx, 1
				mov ah, 40h
				int 21h 
				jc write_error
				pop cx
			loop write_file
		next:
			pop cx
			inc si
	loop repeta
	jmp peste_write_error
	write_error:
		call newLine
		lea dx, msgWriteError
		mov ah, 09h
		int 21h
		jmp final
	peste_write_error:
	;inchid fisierul
	mov bx, handle
	mov ah, 3Eh
	int 21h
	jnc final
		call newLine
		lea dx, msgCloseError
		mov ah, 09h
		int 21h
	final:
	mov ax, 4c00h
	int 21h
code ends
end start
